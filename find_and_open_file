#!/bin/python3

# complete rewrite of zzzfoo, to be simpler and work on my system

from recoll import recoll
import subprocess as sp
from subprocess import PIPE
import argparse
from dataclasses import dataclass

# maximum number of results to return
# making an assumption about how many results the user is willing to dig through
MAX_RESULTS = 20

def parse_args():
    parser = argparse.ArgumentParser(description='find files via a Rofi dialog')
    parser.add_argument('--fulltext',
        dest='full_text_search', 
        action='store_const', const=True,
        default=False,
        help='also do a full text search within files'
    )
    parser.add_argument('--pdf',
        dest='pdf_only',
        action='store_const', const=True,
        default=False,
        help='only return `.pdf` files'
    )
    return parser.parse_args()

def prompt_search_query(fulltext: bool, pdf_only: bool):
    prompt = 'file search' if not fulltext else 'text search'
    if pdf_only: prompt = 'PDF ' + prompt

    ran = sp.run(['/bin/rofi', '-dmenu', '-p', prompt], stdout=PIPE, text=True)
    if ran.returncode != 0: raise RuntimeError('Rofi (search query dialog) returned non-zero')

    return ran.stdout

@dataclass
class SearchResult:
    file_url: str
    filename: str
    snippets: list[str]

def search(user_query: str, fulltext: bool, pdf_only: bool) -> list[SearchResult]:
    db = recoll.connect()
    dbquery = db.query()
    # if using sortby(), it must be before executing the search
    dbquery.sortby('relevancyrating', ascending=False)

    # build the query
    # `,` indicates AND
    query = []
    # fulltext or filename only?
    if fulltext: query.append(user_query)
    else: query.append('filename:' + user_query.replace(' ',','))
    #
    if pdf_only: query.append('ext:pdf')
    #
    query_onestring = ' '.join(query)
        
    # run the query
    _n_results = dbquery.execute(query_onestring)
    query_results = dbquery.fetchmany(MAX_RESULTS)

    results: list[SearchResult] = [
        SearchResult(
             file_url=result.url,
             filename=result.filename,
             snippets=dbquery.getsnippets(result, nohl=True) if fulltext else ''
         )
        for result in query_results
    ]
    return results

# returns the file url
def prompt_select_result(results: list[SearchResult], search_was_fulltext: bool) -> str:

    # process the entries
    entries: list[str] = []

    if (search_was_fulltext):
        idx = 0
        for result in results:
            for snippet in result.snippets:
                entries.append(
                    f'{idx} ' # prepend index to the filename
                    + f'<b>{result.filename}</b>'
                    # `snippet` is a tuple: (page number, matched word, actual snippet)
                    + f'\n<small>    p{snippet[0]}: {repr(snippet[2])}</small>'
                )
                idx += 1
    else:
        for i in range(0, len(results)):
            result = results[i]
            entries.append(
                f'{i} ' # prepend index to the filename
                + result.filename
            )

    entries_onestring = '\0'.join(entries)

    # make user select a file
    ran = sp.run(
        [
            '/bin/rofi',
            '-dmenu',
            '-p', 'results', # prompt text
            '-sep', '\\0',
            '-i', # case-insensitive
            '-markup-rows', # render markup, instead of just displaying it raw
        ]
            + (['-eh', '2'] if search_was_fulltext else []),
        text=True, input=entries_onestring, stdout=PIPE
    )
    if ran.returncode != 0: raise RuntimeError('Rofi (result selection dialog) returned non-zero')

    # process the selection
    selected_ind = int(ran.stdout.split(' ')[0]) # get the index that was prepended to the entry
    return results[selected_ind].file_url

if __name__ == "__main__":
    args = parse_args() # command-line args

    # get query from user
    query_str = prompt_search_query(fulltext=args.full_text_search, pdf_only=args.pdf_only).strip()
    if query_str == '': raise RuntimeError('empty input')

    # search
    results = search(query_str, fulltext=args.full_text_search, pdf_only=args.pdf_only)

    # have user select file
    fileurl = prompt_select_result(results, args.full_text_search)

    # xdg-open the file and exit
    sp.Popen(['/bin/xdg-open', fileurl])
    exit(0) # Popen uses fork() (on Unix systems), so exiting now won't kill the child process
