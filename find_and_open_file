#!/bin/python3

# Peter Lef
# complete rewrite of zzzfoo, to be simpler and work on my system

from recoll import recoll
import subprocess as sp
from subprocess import PIPE
import argparse

# maximum number of results to return
# making an assumption about how many results the user is willing to dig through
MAX_RESULTS = 20

def parse_args():
    parser = argparse.ArgumentParser(description='find files via a Rofi dialog')
    parser.add_argument('--fulltext',
        dest='full_text_search', 
        action='store_const', const=True,
        default=False,
        help='also do a full text search within files'
    )
    parser.add_argument('--pdf',
        dest='pdf_only',
        action='store_const', const=True,
        default=False,
        help='only return `.pdf` files'
    )
    return parser.parse_args()

def prompt_search_query(fulltext: bool, pdf_only: bool):
    prompt = 'file search' if not fulltext else 'text search'
    if pdf_only: prompt = 'PDF ' + prompt

    ran = sp.run(['/bin/rofi', '-dmenu', '-p', prompt], stdout=PIPE, text=True)
    if ran.returncode != 0: raise RuntimeError('Rofi (search query dialog) returned non-zero')

    return ran.stdout

def search(query: str, fulltext: bool, pdf_only: bool): # -> list(recoll.Doc)
    db = recoll.connect()
    dbquery = db.query()
    # if using sortby(), it must be before executing the search
    dbquery.sortby('relevancyrating', ascending=False)

    # @todo this part is sketchy AF, find a more organized way to do this
    # `,` indicates AND
    fname_query = [] # stuff specifically in the filename
    rest_of_query = '' # everything else (tho search will also match this against filenames)
    # the fname part
    if not fulltext: fname_query += [query.replace(' ',',')]
    if pdf_only: fname_query += ['.pdf']
    if fname_query != []: fname_query = 'filename:' + ','.join(fname_query)
    else: fname_query = ''
    # the rest of it
    if fulltext: rest_of_query += query
    # build the query
    query = fname_query + ' ' + rest_of_query
        
    _n_results = dbquery.execute(query) # this is the actual "search" part
    results = dbquery.fetchmany(MAX_RESULTS)
    return results

def prompt_select_result(results): # takes a list of recoll.Docs, returns the index of the selected Doc
    # character separating entries in the Rofi input
    SEP = '\n' # unix filenames could theoretically contain a '\n', but that would be stupid

    # process the entries
    fnames = list(map(lambda res : res.filename, results)) # extract filenames
    for i in range(0, len(fnames)): fnames[i] = f'{i} ' + fnames[i] # prepend indices to the filenames
    fnames = SEP.join(fnames) # convert to SEP-separated string

    # make user select a file
    ran = sp.run(
        ['/bin/rofi', '-dmenu', '-p', 'results', '-sep', SEP, '-i'], # case insensitive
        text=True, input=fnames, stdout=PIPE
    )
    if ran.returncode != 0: raise RuntimeError('Rofi (result selection dialog) returned non-zero')

    # process the selection
    selected_ind = int(ran.stdout.split(' ')[0]) # get the index that was prepended to the entry
    return selected_ind

if __name__ == "__main__":
    args = parse_args() # command-line args

    # get query from user
    query_str = prompt_search_query(fulltext=args.full_text_search, pdf_only=args.pdf_only).strip()
    if query_str == '': raise RuntimeError('empty input')

    # search
    results = search(query_str, fulltext=args.full_text_search, pdf_only=args.pdf_only)

    # have user select file
    selected_ind = prompt_select_result(results)
    fileurl = results[selected_ind].url

    # xdg-open the file and exit
    sp.Popen(['/bin/xdg-open', fileurl])
    exit(0) # Popen uses fork() (on Unix systems), so exiting now won't kill the child process
